rm(n, data, map)
}
tmap_animation(hex_map_list, width = "400", height = "400")
hex_map_list = list()
for (n in 1940:1964) {
data = hexagons_hom_ct_yr %>% filter(year == n)
map = tm_shape(data) + tm_polygons(col = "hom_ct", breaks = c(0, 1, 5, 10, Inf), title = paste("Homicides in", n))
hex_map_list[[n-1939]] = map
rm(n, data, map)
}
tmap_animation(hex_map_list, width = 400, height = 400)
shared_data1 = SharedData$new(hex_map_list)
filter_slider("year", "Year", shared_data1, width = "100%")
tm_shape(hex_map_list) + tm_polygons()
tm_shape(hex_map_list[[1]]) + tm_polygons()
View(hex_map_list)
hex_map_list[[1]]
hex_map_list[[2]]
library(shiny)
sliderInput("Slider", "Move it", min = 1940, max = 1964)
sliderInput("Slider", "Move it", min = 1940, max = 1964, value = 1940)
sliderInput("map_index", "Select Map:", min = 1, max = 25, value = 1, step = 1)
hex_map_list[[input$map_index]]
tmap_animation(hex_map_list, "hex_map_list.gif", width = 400, height = 600)
tmap_animation(hex_map_list, "hex_map_list.gif", width = 400, height = 500)
tmap_animation(hex_map_list, "hex_map_list.gif", width = 400, height = 500, delay = 100)
View(homicides_CA_joined)
View(homicides_CA_joined)
View(homicides_CA_joined)
# Create table of frequency by CA and year
CA_freq_table_yr = as.data.frame(table(homicides_CA_joined$area_num_1, homicides_CA_joined$year)) %>% rename(area_num_1 = Var1, year = Var2, hom_ct = Freq)
View(CA_freq_table_yr)
75*25
class(CAs$area_num_1)
# Create an expanded grid of hexagons that includes each hex/year combo
CAs_yr = expand.grid(area_num_1 = CAs$area_num_1, year = 1940:1964) %>% left_join(CAs, by = "area_num_1") %>% st_as_sf()
View(CAs_yr)
77*25
View(CA_freq_table_yr)
# Merge frequency table back CA/year grid
CAs_hom_ct_yr = CAs_yr %>% left_join(CA_freq_table_yr, join_by(area_num_1, year)) %>% mutate(hom_ct = ifelse(is.na(hom_ct), 0, hom_ct))
# Convert factors to integers/strings
CA_freq_table_yr$area_num_1 = as.character(paste(CA_freq_table_yr$area_num_1))
CA_freq_table_yr$year = as.integer(paste(CA_freq_table_yr$year))
# Merge frequency table back CA/year grid
CAs_hom_ct_yr = CAs_yr %>% left_join(CA_freq_table_yr, join_by(area_num_1, year)) %>% mutate(hom_ct = ifelse(is.na(hom_ct), 0, hom_ct))
View(CAs_hom_ct_yr)
View(CAs_hom_ct)
CA_map_list = list()
for (n in 1940:1964) {
data = CAs_hom_ct_yr %>% filter(year == n)
map = tm_shape(data) + tm_polygons(col = "hom_ct", breaks = c(0, 1, 5, 10, 50, Inf), title = paste("Homicides in", n))
CA_map_list[[n-1939]] = map
rm(n, data, map)
}
View(CA_map_list)
tmap_animation(CA_map_list, "CA_map_list.gif", width = 400, height = 500, delay = 100)
install.packages("phonTools")
install.packages("aspace")
library(aspace)
install.packages("sfdep")
library(sfdep)
sde = std_dev_ellipse(homicides)
?std_dev_ellipse
sde = std_dev_ellipse(homicides)
std_dev_ellipse(homicides)
View(homicides)
homicides = read_sf("homicides_1940-1965_geocoded_v2/homicides_1940-1965_geocoded_v2.shp") %>% filter(geometry != "POINT EMPTY")
homicides = read_sf("homicides_1940-1965_geocoded_v2/homicides_1940-1965_geocoded_v2.shp") %>% filter(!st_is_empty(.))
homicides = read_sf("homicides_1940-1965_geocoded_v2/homicides_1940-1965_geocoded_v2.shp")
homicides = read_sf("homicides_1940-1965_geocoded_v2/homicides_1940-1965_geocoded_v2.shp") %>% filter(!st_is_empty(.))
city_bounds = read_sf("Chicago_City_Limits-shp/Chicago_City_Limits.shp") %>% st_transform(st_crs(homicides))
hexagons = read_sf("hexagons/hexagons.shp") %>% st_transform(st_crs(homicides))
CAs = read_sf("Boundaries - Community Areas (current)/geo_export_e916a3b4-0ea3-4ca2-944a-cb060aacf705.shp") %>% st_transform(st_crs(homicides))
homicides_jitter = st_jitter(homicides, factor = 0.0001)
tmap_mode("view")
tm_shape(city_bounds) + tm_polygons(alpha = 0, border.col = "red", interactive = FALSE) +
tm_shape(homicides_jitter, is.master = TRUE) + tm_dots()
# Assign each point the grid ID of its surrounding hexagon
homicides_hex_joined = st_join(homicides, hexagons, join = st_within)
# Create table of frequency by hexagon
hex_freq_table = as.data.frame(table(homicides_hex_joined$GRID_ID)) %>% rename(GRID_ID = Var1, hom_ct = Freq)
# Merge frequency table back into hexes
hexagons_hom_ct = hexagons %>% left_join(hex_freq_table, by = "GRID_ID") %>% mutate(hom_ct = ifelse(is.na(hom_ct), 0, hom_ct))
# Merge frequency table back into hexes
hexagons_hom_ct = hexagons %>% left_join(hex_freq_table, by = "GRID_ID") %>% mutate(hom_ct = ifelse(is.na(hom_ct), 0, hom_ct))
Viewing the hexagons:
```{r hex_map, message=FALSE, warning=FALSE}
tmap_mode("plot")
tm_shape(hexagons_hom_ct) + tm_polygons(col = "hom_ct", breaks = c(0,1,5,10,50,100,500,Inf), title="Homicides")
# Assign each point the grid ID of its surrounding hexagon
homicides_CA_joined = st_join(homicides, CAs, join = st_within)
# Create table of frequency by hexagon
CA_freq_table = as.data.frame(table(homicides_CA_joined$area_num_1)) %>% rename(area_num_1 = Var1, hom_ct = Freq)
# Merge frequency table back into hexes
CAs_hom_ct = CAs %>% left_join(CA_freq_table, by = "area_num_1") %>% mutate(hom_ct = ifelse(is.na(hom_ct), 0, hom_ct))
tmap_mode("plot")
tm_shape(CAs_hom_ct) + tm_polygons(col = "hom_ct", breaks = c(0,1,5,10,50,100,500,Inf), title="Homicides")
tmap_mode("view")
tm_shape(CAs_hom_ct) + tm_polygons(col = "hom_ct", breaks = c(0,1,5,10,50,100,500,Inf), title="Homicides")
tm_shape(CAs_hom_ct) + tm_polygons(col = "hom_ct", breaks = c(0,1,5,10,50,100,500,Inf), title="Homicides", id="hom_ct")
View(CAs)
View(CAs)
tm_shape(CAs_hom_ct) + tm_polygons(col = "hom_ct", breaks = c(0,1,5,10,50,100,500,Inf), title="Homicides", id="community")
tm_shape(CAs_hom_ct) + tm_polygons(col = "hom_ct", breaks = c(0,1,5,10,50,100,500,Inf), title="Homicides", id="community", popup.vars = c("Homicides" = "hom_ct"))
tm_shape(CAs_hom_ct) + tm_polygons(col = "hom_ct", breaks = c(0,1,5,10,50,100,500,Inf), title="Homicides", id="community", popup.vars = c("Homicides:" = "hom_ct"))
tm_shape(CAs_hom_ct) + tm_polygons(col = "hom_ct", breaks = c(0,1,5,10,50,100,500,Inf), title="Homicides", id="hom_ct", popup.vars = c("Area Name:" = "community", "Homicides:" = "hom_ct"))
tm_shape(CAs_hom_ct) + tm_polygons(col = "hom_ct", breaks = c(0,1,5,10,50,100,500,Inf), title="Homicides", id="<b>hom_ct</b>", popup.vars = c("Area Name:" = "community", "Homicides:" = "hom_ct"))
tm_shape(CAs_hom_ct) + tm_polygons(col = "hom_ct", breaks = c(0,1,5,10,50,100,500,Inf), title="Homicides", id="hom_ct", popup.vars = c("Area Name:" = "community", "Homicides:" = "hom_ct"))
View(hexagons)
tm_shape(hexagons_hom_ct) + tm_polygons(col = "hom_ct", breaks = c(0,1,5,10,50,100,500,Inf), title="Homicides", id="hom_ct", popup.vars = c("Hex ID:" = "GRID_ID", "Homicides:" = "hom_ct"))
tm_shape(hexagons_hom_ct) + tm_polygons(col = "hom_ct", breaks = c(0,1,5,10,50,100,500,Inf), title="Homicides", id="hom_ct", popup.vars = c("Grid ID:" = "GRID_ID", "Homicides:" = "hom_ct"))
# Assign each point the grid ID of its surrounding hexagon
homicides_CA_joined = st_join(homicides, CAs, join = st_within)
# Create table of frequency by hexagon
CA_freq_table = as.data.frame(table(homicides_CA_joined$area_num_1)) %>% rename(area_num_1 = Var1, hom_ct = Freq)
# Merge frequency table back into hexes
CAs_hom_ct = CAs %>% left_join(CA_freq_table, by = "area_num_1") %>% mutate(hom_ct = ifelse(is.na(hom_ct), 0, hom_ct))
tmap_mode("view")
tm_shape(CAs_hom_ct) + tm_polygons(col = "hom_ct", breaks = c(0,1,5,10,50,100,500,Inf), title="Homicides", id="hom_ct", popup.vars = c("Area Name:" = "community", "Homicides:" = "hom_ct"))
homicides_jitter$start = as.Date(homicides_jitter$date, format = "%m/%d/%Y")
shared_data = SharedData$new(homicides_jitter)
filter_slider("date", "Date", shared_data, ~start, width = "100%")
leaflet(shared_data) %>%
leaflet::addTiles() %>%
leaflet::addCircleMarkers(radius = 1)
leaflet(shared_data) %>%
leaflet::addTiles() %>%
leaflet::addCircleMarkers(radius = 1, color = "black")
leaflet(shared_data) %>%
addTiles() %>%
addCircleMarkers(radius = 1, color = "black")
leaflet(shared_data) %>%
addTiles() %>%
addPolygons(data = city_bounds) %>%
addCircleMarkers(radius = 1, color = "black")
tm_shape(city_bounds) + tm_polygons(alpha = 0, border.col = "red", interactive = FALSE) +
tm_shape(homicides_jitter, is.master = TRUE) + tm_dots()
leaflet(homicides_jitter) %>%
addTiles() %>%
addPolygons(data = city_bounds) %>%
addCircleMarkers(radius = 1, color = "black")
leaflet(homicides_jitter) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data = city_bounds) %>%
addCircleMarkers(radius = 1, color = "black")
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addPolygons(data = city_bounds) %>%
addCircleMarkers(radius = 1, color = "black")
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addPolygons(data = city_bounds, opacity = 0.2) %>%
addCircleMarkers(radius = 0.5, color = "black")
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addPolygons(data = city_bounds, opacity = 0.2) %>%
addCircleMarkers(radius = 0.1, color = "black")
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addPolygons(data = city_bounds, opacity = 0.2) %>%
addCircleMarkers(radius = .01, color = "black")
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addPolygons(data = city_bounds, opacity = 0.2) %>%
addCircleMarkers(radius = 5, color = "black")
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addPolygons(data = city_bounds, opacity = 0.2) %>%
addCircleMarkers(radius = 1, color = "black")
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addPolygons(data = city_bounds, opacity = 0.2) %>%
addCircleMarkers(radius = 1, scale = 0.5, color = "black")
leaflet(shared_data) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addPolygons(data = city_bounds, opacity = 0.2) %>%
addCircleMarkers(radius = 1, color = "black")
View(homicides_jitter)
homicides_jitter$start = as.Date(homicides_jitter$date, format = "%m/%d/%Y")
shared_data = SharedData$new(homicides_jitter)
filter_slider("date", "Date", shared_data, ~start, width = "100%")
leaflet(shared_data) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addPolygons(data = city_bounds, opacity = 0.2) %>%
addCircleMarkers(radius = 1, color = "black")
# Create table of frequency by hexagon and year
hex_freq_table_yr = as.data.frame(table(homicides_hex_joined$GRID_ID, homicides_hex_joined$year)) %>% rename(GRID_ID = Var1, year = Var2, hom_ct = Freq)
# Convert factors to integers/strings
hex_freq_table_yr$GRID_ID = as.character(paste(hex_freq_table_yr$GRID_ID))
hex_freq_table_yr$year = as.integer(paste(hex_freq_table_yr$year))
# Create an expanded grid of hexagons that includes each hex/year combo
hexagons_yr = expand.grid(GRID_ID = hexagons$GRID_ID, year = 1940:1964) %>% left_join(hexagons, by = "GRID_ID") %>% st_as_sf()
# Merge frequency table back hex/year grid
hexagons_hom_ct_yr = hexagons_yr %>% left_join(hex_freq_table_yr, join_by(GRID_ID, year)) %>% mutate(hom_ct = ifelse(is.na(hom_ct), 0, hom_ct))
hex_map_list = list()
for (n in 1940:1964) {
data = hexagons_hom_ct_yr %>% filter(year == n)
map = tm_shape(data) + tm_polygons(col = "hom_ct", breaks = c(0, 1, 5, 10, Inf), title = paste("Homicides in", n))
hex_map_list[[n-1939]] = map
rm(n, data, map)
}
tmap_animation(hex_map_list, "hex_map_list.gif", width = 400, height = 500, delay = 100)
# Create table of frequency by CA and year
CA_freq_table_yr = as.data.frame(table(homicides_CA_joined$area_num_1, homicides_CA_joined$year)) %>% rename(area_num_1 = Var1, year = Var2, hom_ct = Freq)
# Convert factors to integers/strings
CA_freq_table_yr$area_num_1 = as.character(paste(CA_freq_table_yr$area_num_1))
CA_freq_table_yr$year = as.integer(paste(CA_freq_table_yr$year))
# Create an expanded grid of CAs that includes each CA/year combo
CAs_yr = expand.grid(area_num_1 = CAs$area_num_1, year = 1940:1964) %>% left_join(CAs, by = "area_num_1") %>% st_as_sf()
# Merge frequency table back CA/year grid
CAs_hom_ct_yr = CAs_yr %>% left_join(CA_freq_table_yr, join_by(area_num_1, year)) %>% mutate(hom_ct = ifelse(is.na(hom_ct), 0, hom_ct))
CA_map_list = list()
for (n in 1940:1964) {
data = CAs_hom_ct_yr %>% filter(year == n)
map = tm_shape(data) + tm_polygons(col = "hom_ct", breaks = c(0, 1, 5, 10, 50, Inf), title = paste("Homicides in", n))
CA_map_list[[n-1939]] = map
rm(n, data, map)
}
tmap_animation(CA_map_list, "CA_map_list.gif", width = 400, height = 500, delay = 100)
sde = std_dev_ellipse(homicides)
View(sde)
plot(sde)
tm_shape(sde) + tm_polygons()
tm_shape(sde) + tm_points()
tm_shape(sde) + tm_dots()
View(sde)
sde_data = std_dev_ellipse(homicides)
# produce the visualization.
sde = st_ellipse(geometry = sde_data, sx = sde_data$sx, sy = sde_data$sy, rotation = -sde_data$theta)
tm_shape(sde) + tm_lines()
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addPolylines(data = sde, opacity = 0.2) %>%
addCircleMarkers(radius = 1, color = "black")
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addCircleMarkers(radius = 1, color = "black") %>%
addPolylines(data = sde)
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addMarkers(color = "black") %>%
addPolylines(data = sde)
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addMarkers() %>%
addPolylines(data = sde)
smallIcon = makeIcon(iconUrl = "icon.png")
View(smallIcon)
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addPolygons(data = city_bounds, opacity = 0.2) %>%
addMarkers(icon = makeIcon("icon.png"))
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addPolygons(data = city_bounds, opacity = 0.2) %>%
addMarkers(icon = makeIcon("icon.png", iconWidth = 4, iconHeight = 4))
rm(smallIcon)
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addPolygons(data = city_bounds, opacity = 0.2) %>%
addMarkers(icon = makeIcon("marker.png", iconWidth = 4, iconHeight = 4))
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addPolygons(data = city_bounds, opacity = 0.2) %>%
addMarkers(icon = makeIcon("marker.png"))
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addPolygons(data = city_bounds, opacity = 0.2) %>%
addMarkers(icon = makeIcon("marker.png", iconWidth = 2, iconHeight = 2))
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addMarkers(icon = makeIcon("marker.png", iconWidth = 2, iconHeight = 2)) %>%
addPolylines(data = sde)
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addMarkers(icon = makeIcon("marker.png", iconWidth = 2, iconHeight = 2)) %>%
addPolygons(data = sde)
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addMarkers(icon = makeIcon("marker.png", iconWidth = 2, iconHeight = 2)) %>%
addPolygons(data = sde, opacity = 0.2)
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addCircleMarkers(radius = 1, weight = 0.1, color = "black") %>%
addPolygons(data = sde, opacity = 0.2)
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addCircleMarkers(radius = 1, weight = 0.2, color = "black") %>%
addPolygons(data = sde, opacity = 0.2)
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addCircleMarkers(radius = 1, weight = 0.5, color = "black") %>%
addPolygons(data = sde, opacity = 0.2)
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addCircleMarkers(radius = 1, weight = 0.5, color = "black", clusterOptions = markerClusterOptions()) %>%
addPolygons(data = sde, opacity = 0.2)
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addCircleMarkers(radius = 1, weight = 0.5, color = "black") %>%
addPolygons(data = sde, opacity = 0.2)
library(leafgl)
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addGlPoints() %>%
addPolygons(data = sde, opacity = 0.2)
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addGlPoints(homicides_jitter) %>%
addPolygons(data = sde, opacity = 0.2)
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addGlPoints(homicides_jitter, radius = 0.5, color = "black") %>%
addPolygons(data = sde, opacity = 0.2)
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addGlPoints(homicides_jitter, radius = 1, color = c(0,0,0)) %>%
addPolygons(data = sde, opacity = 0.2)
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addGlPoints(homicides_jitter, radius = 1, color = cbind(0,0,0)) %>%
addPolygons(data = sde, opacity = 0.2)
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addGlPoints(homicides_jitter, radius = 1, fillColor = "black") %>%
addPolygons(data = sde, opacity = 0.2)
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addGlPoints(homicides_jitter, radius = 2, fillColor = "black") %>%
addPolygons(data = sde, opacity = 0.2)
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addPolygons(data = city_bounds, opacity = 0.2) %>%
addGlPoints(homicides_jitter, radius = 2, fillColor = "black") %>%
```
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addPolygons(data = city_bounds, opacity = 0.2) %>%
addGlPoints(homicides_jitter, radius = 2, fillColor = "black")
leaflet(shared_data) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addGlPolygons(data = city_bounds, opacity = 0.2) %>%
addGlPoints(shared_data, radius = 2, fillColor = "black")
leaflet(shared_data) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addPolygons(data = city_bounds, opacity = 0.2) %>%
addGlPoints(shared_data, radius = 2, fillColor = "black")
leaflet(shared_data) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addPolygons(data = city_bounds, opacity = 0.2) %>%
addGlPoints(radius = 2, fillColor = "black")
leaflet(shared_data) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addPolygons(data = city_bounds, opacity = 0.2) %>%
addCircleMarkers(radius = 1, weight = 0.2, color = "black")
leaflet(shared_data) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addPolygons(data = city_bounds, opacity = 0.2) %>%
addGlPoints(shared_data$selection(), radius = 2, fillColor = "black")
leaflet(shared_data) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addPolygons(data = city_bounds, opacity = 0.2) %>%
addGlPoints(shared_data$data, radius = 2, fillColor = "black")
leaflet(shared_data) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addPolygons(data = city_bounds, opacity = 0.2) %>%
addGlPoints(shared_data$data(), radius = 2, fillColor = "black")
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(dplyr)
library(tmap)
library(leaflet)
library(leafgl)
library(crosstalk)
library(sfdep)
homicides = read_sf("homicides_1940-1965_geocoded_v3/homicides_1940-1965_geocoded_v3.shp") %>% filter(!st_is_empty(.))
city_bounds = read_sf("Chicago_City_Limits-shp/Chicago_City_Limits.shp") %>% st_transform(st_crs(homicides))
hexagons = read_sf("hexagons/hexagons.shp") %>% st_transform(st_crs(homicides))
CAs = read_sf("Boundaries - Community Areas (current)/geo_export_e916a3b4-0ea3-4ca2-944a-cb060aacf705.shp") %>% st_transform(st_crs(homicides))
homicides_jitter = st_jitter(homicides, factor = 0.0001)
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addPolygons(data = city_bounds, opacity = 0.2) %>%
addGlPoints(homicides_jitter, radius = 2, fillColor = "black")
# Assign each point the grid ID of its surrounding hexagon
homicides_hex_joined = st_join(homicides, hexagons, join = st_within)
# Create table of frequency by hexagon
hex_freq_table = as.data.frame(table(homicides_hex_joined$GRID_ID)) %>% rename(GRID_ID = Var1, hom_ct = Freq)
# Merge frequency table back into hexes
hexagons_hom_ct = hexagons %>% left_join(hex_freq_table, by = "GRID_ID") %>% mutate(hom_ct = ifelse(is.na(hom_ct), 0, hom_ct))
tmap_mode("view")
tm_shape(hexagons_hom_ct) + tm_polygons(col = "hom_ct", breaks = c(0,1,5,10,50,100,500,Inf), title="Homicides", id="hom_ct", popup.vars = c("Grid ID:" = "GRID_ID", "Homicides:" = "hom_ct"))
# Assign each point the grid ID of its surrounding hexagon
homicides_CA_joined = st_join(homicides, CAs, join = st_within)
# Create table of frequency by hexagon
CA_freq_table = as.data.frame(table(homicides_CA_joined$area_num_1)) %>% rename(area_num_1 = Var1, hom_ct = Freq)
# Merge frequency table back into hexes
CAs_hom_ct = CAs %>% left_join(CA_freq_table, by = "area_num_1") %>% mutate(hom_ct = ifelse(is.na(hom_ct), 0, hom_ct))
tmap_mode("view")
tm_shape(CAs_hom_ct) + tm_polygons(col = "hom_ct", breaks = c(0,1,5,10,50,100,500,Inf), title="Homicides", id="hom_ct", popup.vars = c("Area Name:" = "community", "Homicides:" = "hom_ct"))
homicides_jitter$start = as.Date(homicides_jitter$date, format = "%m/%d/%Y")
shared_data = SharedData$new(homicides_jitter)
filter_slider("date", "Date", shared_data, ~start, width = "100%")
View(shared_data)
View(homicides_jitter)
homicides = read_sf("homicides_1940-1965_geocoded_v3/homicides_1940-1965_geocoded_v3.shp") %>% filter(!st_is_empty(.)) %>% filter(date != "NaT")
View(homicides)
# Load in homicide data and remove entries with missing geometry and missing date
homicides = read_sf("homicides_1940-1965_geocoded_v3/homicides_1940-1965_geocoded_v3.shp")
View(homicides)
which(homicides$geometry == "POINT EMPTY")
(homicides$geometry == "POINT EMPTY")
length(homicides$geometry == "POINT EMPTY")
View(homicides)
which(homicides$geometry == "POINT EMPTY")
sum(homicides$geometry == "POINT EMPTY")
nrow(homicides[homicides$geometry == 'POINT EMPTY', ])
nrow(homicides[homicides$clean_note == 'CCH', ])
# Load in homicide data and remove entries with missing geometry and missing date
homicides = read_sf("homicides_1940-1965_geocoded_v3/homicides_1940-1965_geocoded_v3.shp") %>% filter(!st_is_empty(.))
7470-7387
# Load in homicide data and remove entries with missing geometry (n=83) and missing date
homicides = read_sf("homicides_1940-1965_geocoded_v3/homicides_1940-1965_geocoded_v3.shp") %>% filter(!st_is_empty(.)) %>% filter(date != "NaT")
city_bounds = read_sf("Chicago_City_Limits-shp/Chicago_City_Limits.shp") %>% st_transform(st_crs(homicides))
hexagons = read_sf("hexagons/hexagons.shp") %>% st_transform(st_crs(homicides))
CAs = read_sf("Boundaries - Community Areas (current)/geo_export_e916a3b4-0ea3-4ca2-944a-cb060aacf705.shp") %>% st_transform(st_crs(homicides))
city_bounds = read_sf("Chicago_City_Limits-shp/Chicago_City_Limits.shp") %>% st_transform(st_crs(homicides))
hexagons = read_sf("hexagons/hexagons.shp") %>% st_transform(st_crs(homicides))
CAs = read_sf("Boundaries - Community Areas (current)/geo_export_e916a3b4-0ea3-4ca2-944a-cb060aacf705.shp") %>% st_transform(st_crs(homicides))
## Simple Placement Map
A small amount of "jitter" is applied to points in order to make overlapping points both visible:
```{r jitter points, results=FALSE, message=FALSE, warning=FALSE}
homicides_jitter = st_jitter(homicides, factor = 0.0001)
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addPolygons(data = city_bounds, opacity = 0.2) %>%
addGlPoints(homicides_jitter, radius = 2, fillColor = "black")
# Assign each point the grid ID of its surrounding hexagon
homicides_hex_joined = st_join(homicides, hexagons, join = st_within)
# Create table of frequency by hexagon
hex_freq_table = as.data.frame(table(homicides_hex_joined$GRID_ID)) %>% rename(GRID_ID = Var1, hom_ct = Freq)
# Merge frequency table back into hexes
hexagons_hom_ct = hexagons %>% left_join(hex_freq_table, by = "GRID_ID") %>% mutate(hom_ct = ifelse(is.na(hom_ct), 0, hom_ct))
tmap_mode("view")
tm_shape(hexagons_hom_ct) + tm_polygons(col = "hom_ct", breaks = c(0,1,5,10,50,100,500,Inf), title="Homicides", id="hom_ct", popup.vars = c("Grid ID:" = "GRID_ID", "Homicides:" = "hom_ct"))
# Assign each point the grid ID of its surrounding hexagon
homicides_CA_joined = st_join(homicides, CAs, join = st_within)
# Create table of frequency by hexagon
CA_freq_table = as.data.frame(table(homicides_CA_joined$area_num_1)) %>% rename(area_num_1 = Var1, hom_ct = Freq)
# Merge frequency table back into hexes
CAs_hom_ct = CAs %>% left_join(CA_freq_table, by = "area_num_1") %>% mutate(hom_ct = ifelse(is.na(hom_ct), 0, hom_ct))
tmap_mode("view")
tm_shape(CAs_hom_ct) + tm_polygons(col = "hom_ct", breaks = c(0,1,5,10,50,100,500,Inf), title="Homicides", id="hom_ct", popup.vars = c("Area Name:" = "community", "Homicides:" = "hom_ct"))
homicides_jitter$start = as.Date(homicides_jitter$date, format = "%m/%d/%Y")
shared_data = SharedData$new(homicides_jitter)
filter_slider("date", "Date", shared_data, ~start, width = "100%")
filter_slider("date", "Date", shared_data, ~start, width = "100%")
leaflet(shared_data) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addPolygons(data = city_bounds, opacity = 0.2) %>%
addCircleMarkers(radius = 1, weight = 0.2, color = "black")
?filter_slider
homicides_jitter$start = as.Date(homicides_jitter$date, format = "%m/%d/%Y")
homicides_jitter$start = as.Date(homicides_jitter$date)
filter_slider("date", "Date", shared_data, ~start, width = "100%")
shared_data = SharedData$new(homicides_jitter)
filter_slider("date", "Date", shared_data, ~start, width = "100%")
leaflet(shared_data) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addPolygons(data = city_bounds, opacity = 0.2) %>%
addCircleMarkers(radius = 1, weight = 0.2, color = "black")
# Create table of frequency by hexagon and year
hex_freq_table_yr = as.data.frame(table(homicides_hex_joined$GRID_ID, homicides_hex_joined$year)) %>% rename(GRID_ID = Var1, year = Var2, hom_ct = Freq)
# Convert factors to integers/strings
hex_freq_table_yr$GRID_ID = as.character(paste(hex_freq_table_yr$GRID_ID))
hex_freq_table_yr$year = as.integer(paste(hex_freq_table_yr$year))
# Create an expanded grid of hexagons that includes each hex/year combo
hexagons_yr = expand.grid(GRID_ID = hexagons$GRID_ID, year = 1940:1964) %>% left_join(hexagons, by = "GRID_ID") %>% st_as_sf()
# Merge frequency table back hex/year grid
hexagons_hom_ct_yr = hexagons_yr %>% left_join(hex_freq_table_yr, join_by(GRID_ID, year)) %>% mutate(hom_ct = ifelse(is.na(hom_ct), 0, hom_ct))
hex_map_list = list()
for (n in 1940:1964) {
data = hexagons_hom_ct_yr %>% filter(year == n)
map = tm_shape(data) + tm_polygons(col = "hom_ct", breaks = c(0, 1, 5, 10, Inf), title = paste("Homicides in", n))
hex_map_list[[n-1939]] = map
rm(n, data, map)
}
tmap_animation(hex_map_list, "hex_map_list.gif", width = 400, height = 500, delay = 100)
# Create table of frequency by CA and year
CA_freq_table_yr = as.data.frame(table(homicides_CA_joined$area_num_1, homicides_CA_joined$year)) %>% rename(area_num_1 = Var1, year = Var2, hom_ct = Freq)
# Convert factors to integers/strings
CA_freq_table_yr$area_num_1 = as.character(paste(CA_freq_table_yr$area_num_1))
CA_freq_table_yr$year = as.integer(paste(CA_freq_table_yr$year))
# Create an expanded grid of CAs that includes each CA/year combo
CAs_yr = expand.grid(area_num_1 = CAs$area_num_1, year = 1940:1964) %>% left_join(CAs, by = "area_num_1") %>% st_as_sf()
# Merge frequency table back CA/year grid
CAs_hom_ct_yr = CAs_yr %>% left_join(CA_freq_table_yr, join_by(area_num_1, year)) %>% mutate(hom_ct = ifelse(is.na(hom_ct), 0, hom_ct))
CA_map_list = list()
for (n in 1940:1964) {
data = CAs_hom_ct_yr %>% filter(year == n)
map = tm_shape(data) + tm_polygons(col = "hom_ct", breaks = c(0, 1, 5, 10, 50, Inf), title = paste("Homicides in", n))
CA_map_list[[n-1939]] = map
rm(n, data, map)
}
tmap_animation(CA_map_list, "CA_map_list.gif", width = 400, height = 500, delay = 100)
sde_data = std_dev_ellipse(homicides)
sde = st_ellipse(geometry = sde_data, sx = sde_data$sx, sy = sde_data$sy, rotation = -sde_data$theta)
leaflet(homicides_jitter) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addGlPoints(homicides_jitter, radius = 2, fillColor = "black") %>%
addPolygons(data = sde, opacity = 0.2)
