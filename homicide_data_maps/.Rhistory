aggregated_data = aggregate(data$hom_rt, list(data$GRID_ID), FUN = mean_na_rm) %>%
rename(GRID_ID = Group.1, hom_rt = x) %>%
left_join(hexagons_annexed, by = "GRID_ID") %>%
st_as_sf()
map = tm_shape(aggregated_data) + tm_facets(by = "annex_category", free.coords = F, scale.factor = 1) + tm_polygons(col = "hom_rt", breaks = c(0, 0.001, 0.01, 0.1, 1, 10), title = paste0("Homicides per building in ", n, "-", n+4))
pt4_map_list_annexed[[1+length(pt4_map_list_annexed)]] = map
rm(n, data, aggregated_data, map)
}
}
tmap_animation(pt4_map_list_annexed, "hex_map_list_annexed.gif", width = 400, height = 500, delay = 100)
mean_na_rm = function(x) {
mean(x, na.rm = TRUE)
}
pt4_map_list_annexed = list()
for (n in seq(1875, 2014, 5)) {
if (n < 1930 | n > 1939) {
data = pt4_annexed %>%
filter(between(year, n, n+4))
aggregated_data = aggregate(data$hom_rt, list(data$GRID_ID), FUN = mean_na_rm) %>%
rename(GRID_ID = Group.1, hom_rt = x) %>%
left_join(hexagons_annexed, by = "GRID_ID") %>%
st_as_sf()
map = tm_shape(aggregated_data) + tm_facets(by = "annex_category", free.coords = F, scale.factor = 3) + tm_polygons(col = "hom_rt", breaks = c(0, 0.001, 0.01, 0.1, 1, 10), title = paste0("Homicides per building in ", n, "-", n+4))
pt4_map_list_annexed[[1+length(pt4_map_list_annexed)]] = map
rm(n, data, aggregated_data, map)
}
}
tmap_animation(pt4_map_list_annexed, "hex_map_list_annexed.gif", width = 400, height = 500, delay = 100)
mean_na_rm = function(x) {
mean(x, na.rm = TRUE)
}
pt4_map_list_annexed = list()
for (n in seq(1875, 2014, 5)) {
if (n < 1930 | n > 1939) {
data = pt4_annexed %>%
filter(between(year, n, n+4))
aggregated_data = aggregate(data$hom_rt, list(data$GRID_ID), FUN = mean_na_rm) %>%
rename(GRID_ID = Group.1, hom_rt = x) %>%
left_join(hexagons_annexed, by = "GRID_ID") %>%
st_as_sf()
map = tm_shape(aggregated_data) + tm_facets(by = "annex_category", free.coords = F, scale.factor = 2) + tm_polygons(col = "hom_rt", breaks = c(0, 0.001, 0.01, 0.1, 1, 10), title = paste0("Homicides per building in ", n, "-", n+4)) + tm_layout(legend.text.size = 20)
pt4_map_list_annexed[[1+length(pt4_map_list_annexed)]] = map
rm(n, data, aggregated_data, map)
}
}
tmap_animation(pt4_map_list_annexed, "hex_map_list_annexed.gif", width = 400, height = 500, delay = 100)
mean_na_rm = function(x) {
mean(x, na.rm = TRUE)
}
pt4_map_list_annexed = list()
for (n in seq(1875, 2014, 5)) {
if (n < 1930 | n > 1939) {
data = pt4_annexed %>%
filter(between(year, n, n+4))
aggregated_data = aggregate(data$hom_rt, list(data$GRID_ID), FUN = mean_na_rm) %>%
rename(GRID_ID = Group.1, hom_rt = x) %>%
left_join(hexagons_annexed, by = "GRID_ID") %>%
st_as_sf()
map = tm_shape(aggregated_data) + tm_facets(by = "annex_category", free.coords = F, scale.factor = 2) + tm_polygons(col = "hom_rt", breaks = c(0, 0.001, 0.01, 0.1, 1, 10), title = paste0("Homicides per building in ", n, "-", n+4)) + tm_layout(legend.text.size = 10)
pt4_map_list_annexed[[1+length(pt4_map_list_annexed)]] = map
rm(n, data, aggregated_data, map)
}
}
tmap_animation(pt4_map_list_annexed, "hex_map_list_annexed.gif", width = 400, height = 500, delay = 100)
mean_na_rm = function(x) {
mean(x, na.rm = TRUE)
}
pt4_map_list_annexed = list()
for (n in seq(1875, 2014, 5)) {
if (n < 1930 | n > 1939) {
data = pt4_annexed %>%
filter(between(year, n, n+4))
aggregated_data = aggregate(data$hom_rt, list(data$GRID_ID), FUN = mean_na_rm) %>%
rename(GRID_ID = Group.1, hom_rt = x) %>%
left_join(hexagons_annexed, by = "GRID_ID") %>%
st_as_sf()
map = tm_shape(aggregated_data) + tm_facets(by = "annex_category", free.coords = F, scale.factor = 2) + tm_polygons(col = "hom_rt", breaks = c(0, 0.001, 0.01, 0.1, 1, 10), title = paste0("Homicides per building in ", n, "-", n+4)) + tm_layout(legend.title.size = 10)
pt4_map_list_annexed[[1+length(pt4_map_list_annexed)]] = map
rm(n, data, aggregated_data, map)
}
}
tmap_animation(pt4_map_list_annexed, "hex_map_list_annexed.gif", width = 400, height = 500, delay = 100)
mean_na_rm = function(x) {
mean(x, na.rm = TRUE)
}
pt4_map_list_annexed = list()
for (n in seq(1875, 2014, 5)) {
if (n < 1930 | n > 1939) {
data = pt4_annexed %>%
filter(between(year, n, n+4))
aggregated_data = aggregate(data$hom_rt, list(data$GRID_ID), FUN = mean_na_rm) %>%
rename(GRID_ID = Group.1, hom_rt = x) %>%
left_join(hexagons_annexed, by = "GRID_ID") %>%
st_as_sf()
map = tm_shape(aggregated_data) + tm_facets(by = "annex_category", free.coords = F, scale.factor = 2) + tm_polygons(col = "hom_rt", breaks = c(0, 0.001, 0.01, 0.1, 1, 10), title = paste0("Homicides per building in ", n, "-", n+4)) + tm_layout(legend.title.size = 40)
pt4_map_list_annexed[[1+length(pt4_map_list_annexed)]] = map
rm(n, data, aggregated_data, map)
}
}
tmap_animation(pt4_map_list_annexed, "hex_map_list_annexed.gif", width = 400, height = 500, delay = 100)
mean_na_rm = function(x) {
mean(x, na.rm = TRUE)
}
pt4_map_list_annexed = list()
for (n in seq(1875, 2014, 5)) {
if (n < 1930 | n > 1939) {
data = pt4_annexed %>%
filter(between(year, n, n+4))
aggregated_data = aggregate(data$hom_rt, list(data$GRID_ID), FUN = mean_na_rm) %>%
rename(GRID_ID = Group.1, hom_rt = x) %>%
left_join(hexagons_annexed, by = "GRID_ID") %>%
st_as_sf()
map = tm_shape(aggregated_data) + tm_facets(by = "annex_category", free.coords = F, scale.factor = 2) + tm_polygons(col = "hom_rt", breaks = c(0, 0.001, 0.01, 0.1, 1, 10), title = paste0("Homicides per building in ", n, "-", n+4)) + tm_layout(title.size = 10)
pt4_map_list_annexed[[1+length(pt4_map_list_annexed)]] = map
rm(n, data, aggregated_data, map)
}
}
tmap_animation(pt4_map_list_annexed, "hex_map_list_annexed.gif", width = 400, height = 500, delay = 100)
mean_na_rm = function(x) {
mean(x, na.rm = TRUE)
}
pt4_map_list_annexed = list()
for (n in seq(1875, 2014, 5)) {
if (n < 1930 | n > 1939) {
data = pt4_annexed %>%
filter(between(year, n, n+4))
aggregated_data = aggregate(data$hom_rt, list(data$GRID_ID), FUN = mean_na_rm) %>%
rename(GRID_ID = Group.1, hom_rt = x) %>%
left_join(hexagons_annexed, by = "GRID_ID") %>%
st_as_sf()
map = tm_shape(aggregated_data) + tm_facets(by = "annex_category", free.coords = F, scale.factor = 2) + tm_polygons(col = "hom_rt", breaks = c(0, 0.001, 0.01, 0.1, 1, 10), title = paste0("Homicides per building in ", n, "-", n+4)) + tm_layout(title.size = 20)
pt4_map_list_annexed[[1+length(pt4_map_list_annexed)]] = map
rm(n, data, aggregated_data, map)
}
}
tmap_animation(pt4_map_list_annexed, "hex_map_list_annexed.gif", width = 400, height = 500, delay = 100)
tmap_mode("view")
mean_na_rm = function(x) {
mean(x, na.rm = TRUE)
}
pt4_map_list_annexed = list()
for (n in seq(1875, 2014, 5)) {
if (n < 1930 | n > 1939) {
data = pt4_annexed %>%
filter(between(year, n, n+4))
aggregated_data = aggregate(data$hom_rt, list(data$GRID_ID), FUN = mean_na_rm) %>%
rename(GRID_ID = Group.1, hom_rt = x) %>%
left_join(hexagons_annexed, by = "GRID_ID") %>%
st_as_sf()
tmap_mode("view")
map = tm_shape(aggregated_data) + tm_polygons(col = "hom_rt", breaks = c(0, 0.001, 0.01, 0.1, 1, 10), title = paste0("Homicides per building in ", n, "-", n+4))
pt4_map_list_annexed[[1+length(pt4_map_list_annexed)]] = map
rm(n, data, aggregated_data, map)
}
}
tmap_animation(pt4_map_list_annexed, "hex_map_list_annexed.gif", width = 400, height = 500, delay = 100)
mean_na_rm = function(x) {
mean(x, na.rm = TRUE)
}
pt4_map_list_annexed = list()
for (n in seq(1875, 2014, 5)) {
if (n < 1930 | n > 1939) {
data = pt4_annexed %>%
filter(between(year, n, n+4))
aggregated_data = aggregate(data$hom_rt, list(data$GRID_ID), FUN = mean_na_rm) %>%
rename(GRID_ID = Group.1, hom_rt = x) %>%
left_join(hexagons_annexed, by = "GRID_ID") %>%
st_as_sf()
map = tm_shape(aggregated_data) + tm_facets(by = "annex_category", free.coords = F, scale.factor = 2) + tm_polygons(col = "hom_rt", breaks = c(0, 0.001, 0.01, 0.1, 1, 10), title = paste0("Homicides per building in ", n, "-", n+4))
pt4_map_list_annexed[[1+length(pt4_map_list_annexed)]] = map
rm(n, data, aggregated_data, map)
}
}
tmap_animation(pt4_map_list_annexed, "hex_map_list_annexed.gif", width = 400, height = 500, delay = 100)
redlined_areas = read_sf("redlining/redlining.geojson") %>%
st_transform(st_crs(hexagons))
View(redlined_areas)
redlined_areas = read_sf("redlining/redlining.geojson") %>%
st_transform(st_crs(hexagons)) %>%
select(grade)
hexagons_redlined = hexagons %>%
st_centroid() %>%
st_filter(city_bounds, .predicate = st_within) %>%
st_join(redlined_areas, join = st_within)
hexagons_redlined = hexagons %>%
st_centroid() %>%
st_filter(city_bounds, .predicate = st_within)
View(hexagons_redlined)
hexagons_redlined = hexagons %>%
st_centroid() %>%
st_filter(city_bounds, .predicate = st_within) %>%
st_join(redlined_areas, join = st_within)
st_is_valid(redlined_areas)
redlined_areas = read_sf("redlining/redlining.geojson") %>%
st_transform(st_crs(hexagons)) %>%
st_make_valid() %>%
select(grade)
hexagons_redlined = hexagons %>%
st_centroid() %>%
st_filter(city_bounds, .predicate = st_within) %>%
st_join(redlined_areas, join = st_within)
View(hexagons_redlined)
View(redlined_areas)
tmap_mode("view")
tm_shape(redlined_areas) + tm_polygons(col = "grade")
plot(hexagons_redlined)
hexagons_redlined = hexagons %>%
st_centroid() %>%
st_filter(city_bounds, .predicate = st_within) %>%
st_join(redlined_areas, join = st_within) %>%
st_drop_geometry() %>%
right_join(hexagons, ., by="GRID_ID")
View(hexagons_redlined)
hexagons_redlined = hexagons %>%
st_centroid() %>%
st_filter(city_bounds, .predicate = st_within) %>%
st_join(redlined_areas, join = st_within) %>%
st_drop_geometry() %>%
right_join(hexagons, ., by="GRID_ID") %>%
select(GRID_ID, grade)
tm_shape(hexagons_redlined) + tm_polygons(col = "grade", title="Redlining Grade", id="grade", popup.vars = c("Grid ID:" = "GRID_ID", "Redlining Grade:" = "grade"))
tmap_mode("view")
tm_shape(hexagons_redlined) + tm_polygons(col = "grade", palette = c("#00ff00", "#0000ff", "#ffff00", "#ff0000"), title="Redlining Grade", id="grade", popup.vars = c("Grid ID:" = "GRID_ID", "Redlining Grade:" = "grade"))
tmap_mode("view")
tm_shape(hexagons_redlined) + tm_polygons(col = "grade", palette = c("#00aa00", "#0000ff", "#ffff00", "#ff0000"), title="Redlining Grade", id="grade", popup.vars = c("Grid ID:" = "GRID_ID", "Redlining Grade:" = "grade"))
pt4_redlined = right_join(pt4_data, st_drop_geometry(hexagons_redlined), by = "GRID_ID") %>%
st_drop_geometry()
View(pt4_redlined)
View(pt4_redlined)
pt4_redlined = right_join(pt4_data, st_drop_geometry(hexagons_redlined), by = "GRID_ID") %>%
st_drop_geometry()
pt4_redlined = right_join(pt4_data, st_drop_geometry(hexagons_redlined), by = "GRID_ID") %>%
st_drop_geometry()
pt4_redlined_aggregated = pt4_redlined %>%
group_by(year, grade) %>%
summarise(hom_ct = sum(hom_ct), bldg_ct = sum(bldg_ct)) %>%
mutate(hom_rt = hom_ct / bldg_ct)
# Line Graph
ggplot(data = pt4_redlined_aggregated, aes(x = year, y = hom_rt, group = grade)) +
geom_line(aes(color = grade), size = 1) +
ylab("Homicides per Building") +
xlab("Year")
# Line Graph
ggplot(data = pt4_redlined_aggregated, aes(x = year, y = hom_rt, group = grade)) +
geom_line(aes(color = grade), size = 1, palette = c("#00aa00", "#0000ff", "#ffff00", "#ff0000")) +
ylab("Homicides per Building") +
xlab("Year")
# Line Graph
ggplot(data = pt4_annexed_aggregated, aes(x = year, y = hom_rt, group = annex_category)) +
geom_line(aes(color = annex_category), size = 1) +
ylab("Homicides per Building") +
xlab("Year") +
scale_y_continuous(trans='log10')
# Line Graph
ggplot(data = pt4_annexed_aggregated, aes(x = year, y = hom_rt, group = annex_category)) +
geom_line(aes(color = annex_category), size = 1) +
ylab("Homicides per Building") +
xlab("Year")
# Line Graph
ggplot(data = pt4_annexed_aggregated, aes(x = year, y = hom_rt, group = annex_category)) +
geom_line(aes(color = annex_category), size = 1) +
ylab("Homicides per Building") +
xlab("Year") +
scale_color_binned(c("#00aa00", "#0000ff", "#ffff00", "#ff0000"))
# Line Graph
ggplot(data = pt4_annexed_aggregated, aes(x = year, y = hom_rt, group = annex_category)) +
geom_line(aes(color = annex_category), size = 1) +
ylab("Homicides per Building") +
xlab("Year") +
scale_color_manual(c("#00aa00", "#0000ff", "#ffff00", "#ff0000"))
# Line Graph
ggplot(data = pt4_annexed_aggregated, aes(x = year, y = hom_rt, group = annex_category)) +
geom_line(aes(color = annex_category), size = 1) +
ylab("Homicides per Building") +
xlab("Year") +
scale_color_manual(values = c("#00aa00", "#0000ff", "#ffff00", "#ff0000"))
# Line Graph
ggplot(data = pt4_annexed_aggregated, aes(x = year, y = hom_rt, group = annex_category)) +
geom_line(aes(color = annex_category), size = 1) +
ylab("Homicides per Building") +
xlab("Year")
# Line Graph
ggplot(data = pt4_redlined_aggregated, aes(x = year, y = hom_rt, group = grade)) +
geom_line(aes(color = grade), size = 1, palette = c("#00aa00", "#0000ff", "#ffff00", "#ff0000")) +
ylab("Homicides per Building") +
xlab("Year") +
scale_color_manual(values = c("#00aa00", "#0000ff", "#ffff00", "#ff0000"))
# Line Graph
ggplot(data = pt4_redlined_aggregated, aes(x = year, y = hom_rt, group = grade)) +
geom_line(aes(color = grade), size = 1, palette = c("#00aa00", "#0000ff", "#ffff00", "#ff0000")) +
ylab("Homicides per Building") +
xlab("Year") +
scale_color_manual(values = c("#00aa00", "#0000ff", "#ffff00", "#ff0000")) +
scale_y_continuous(limits = c(0, 0.2))
# Line Graph
ggplot(data = pt4_redlined_aggregated, aes(x = year, y = hom_rt, group = grade)) +
geom_line(aes(color = grade), size = 1, palette = c("#00aa00", "#0000ff", "#ffff00", "#ff0000")) +
ylab("Homicides per Building") +
xlab("Year") +
scale_color_manual(values = c("#00aa00", "#0000ff", "#ffff00", "#ff0000")) +
scale_y_continuous(limits = c(0, 0.02))
# Line Graph
ggplot(data = pt4_redlined_aggregated, aes(x = year, y = hom_rt, group = grade)) +
geom_line(aes(color = grade), size = 1, palette = c("#00aa00", "#0000ff", "#ffff00", "#ff0000")) +
ylab("Homicides per Building") +
xlab("Year") +
scale_color_manual(values = c("#00aa00", "#0000ff", "#ffff00", "#ff0000"))
# Line Graph
ggplot(data = pt4_redlined_aggregated, aes(x = year, y = hom_rt, group = grade)) +
geom_line(aes(color = grade), size = 1, palette = c("#00aa00", "#0000ff", "#ffff00", "#ff0000")) +
ylab("Homicides per Building") +
xlab("Year") +
scale_color_manual(values = c("#00aa00", "#0000ff", "#ffff00", "#ff0000")) +
scale_y_continuous(limits = c(0, 0.02))
# Line Graph
ggplot(data = pt4_redlined_aggregated, aes(x = year, y = hom_rt, group = grade)) +
geom_line(aes(color = grade), size = 1, palette = c("#00aa00", "#0000ff", "#ffff00", "#ff0000")) +
ylab("Homicides per Building") +
xlab("Year") +
scale_color_manual(values = c("#00aa00", "#0000ff", "#ffff00", "#ff0000")) +
scale_y_continuous(limits = c(0, 0.01))
# Line Graph
ggplot(data = pt4_redlined_aggregated, aes(x = year, y = hom_rt, group = grade)) +
geom_line(aes(color = grade), size = 1, palette = c("#00aa00", "#0000ff", "#ffff00", "#ff0000")) +
ylab("Homicides per Building") +
xlab("Year") +
scale_color_manual(values = c("#00aa00", "#0000ff", "#ffff00", "#ff0000")) +
coord_cartesian(ylim = c(0, 0.01))
# Line Graph
ggplot(data = pt4_annexed_aggregated, aes(x = year, y = hom_rt, group = annex_category)) +
geom_line(aes(color = annex_category), size = 1) +
ylab("Homicides per Building") +
xlab("Year") +
coord_cartesian(ylim = c(0, 0.01))
mean_na_rm = function(x) {
mean(x, na.rm = TRUE)
}
pt4_map_list_annexed = list()
for (n in seq(1875, 2014, 5)) {
if (n < 1930 | n > 1939) {
data = pt4_annexed %>%
filter(between(year, n, n+4))
aggregated_data = aggregate(data$hom_rt, list(data$GRID_ID), FUN = mean_na_rm) %>%
rename(GRID_ID = Group.1, hom_rt = x) %>%
left_join(hexagons_annexed, by = "GRID_ID") %>%
st_as_sf()
map = tm_shape(aggregated_data) + tm_facets(by = "annex_category", free.coords = F, scale.factor = 2) + tm_polygons(col = "hom_rt", breaks = c(0, 0.001, 0.01, 0.1, 1, 10), title = paste0(n, "-", n+4))
pt4_map_list_annexed[[1+length(pt4_map_list_annexed)]] = map
rm(n, data, aggregated_data, map)
}
}
tmap_animation(pt4_map_list_annexed, "hex_map_list_annexed.gif", width = 400, height = 500, delay = 100)
pt4_map_list_redlined = list()
for (n in seq(1875, 2014, 5)) {
if (n < 1930 | n > 1939) {
data = pt4_redlined %>%
filter(between(year, n, n+4))
aggregated_data = aggregate(data$hom_rt, list(data$GRID_ID), FUN = mean_na_rm) %>%
rename(GRID_ID = Group.1, hom_rt = x) %>%
left_join(hexagons_redlined, by = "GRID_ID") %>%
st_as_sf()
map = tm_shape(aggregated_data) + tm_facets(by = "grade", free.coords = F, scale.factor = 2) + tm_polygons(col = "hom_rt", breaks = c(0, 0.001, 0.01, 0.1, 1, 10), title = paste0(n, "-", n+4))
pt4_map_list_redlined[[1+length(pt4_map_list_redlined)]] = map
rm(n, data, aggregated_data, map)
}
}
tmap_animation(pt4_map_list_redlined, "hex_map_list_redlined.gif", width = 800, height = 1000, delay = 100)
tmap_animation(pt4_map_list_annexed, "hex_map_list_annexed.gif", width = 800, height = 1000, delay = 100)
tmap_animation(pt4_map_list_redlined, "hex_map_list_redlined.gif", width = 800, height = 1500, delay = 100)
View(pt4_data)
View(export_hexagons)
knitr::opts_chunk$set(echo = TRUE)
land_sales = read_sf("land_sale/cook_county_with_geometries.geojson") %>%
st_transform(st_crs(hexagons))
library(sf)
library(dplyr)
library(tmap)
library(leaflet)
library(leafgl)
library(crosstalk)
library(sfdep)
library(ggplot2)
land_sales = read_sf("land_sale/cook_county_with_geometries.geojson") %>%
st_transform(st_crs(hexagons))
st_is_valid(land_sales)
all(st_is_valid(land_sales))
View(land_sales)
land_sales = read_sf("land_sale/cook_county_with_geometries.geojson") %>%
st_transform(st_crs(hexagons)) %>%
select(Date.of.Purchase)
land_sales = read_sf("land_sale/cook_county_with_geometries.geojson") %>%
st_transform(st_crs(hexagons))
%>%
land_sales = read_sf("land_sale/cook_county_with_geometries.geojson") %>%
st_transform(st_crs(hexagons)) %>%
st_make_valid()
land_sales = read_sf("land_sale/cook_county_with_geometries.geojson") %>%
st_transform(st_crs(hexagons)) %>%
st_make_valid()
land_sales = read_sf("land_sale/cook_county_with_geometries.geojson") %>%
st_transform(st_crs(hexagons)) %>%
select(Date.of.Purchase)
class(land_sales$Date.of.Purchase[0])
as.Date("23/8/22 12:45", format ="%m/%d/%Y" )
as.Date("23/8/22", format ="%m/%d/%Y" )
as.Date("23/8/22", format ="%mm/%d/%YY" )
as.Date("2/8/22", format ="%m/%d/%YY" )
land_sales = read_sf("land_sale/cook_county_with_geometries.geojson") %>%
st_transform(st_crs(hexagons)) %>%
select(Date.of.Purchase) %>%
mutate(year = as.Date(Date.of.Purchase))
land_sales = read_sf("land_sale/cook_county_with_geometries.geojson") %>%
st_transform(st_crs(hexagons)) %>%
select(Date.of.Purchase) %>%
mutate(year = as.Date(Date.of.Purchase, format = "%m/%d/%Y"))
tmap_mode("view")
tm_shape(land_sales) + tm_polygons(col = "year")
land_sales = read_sf("land_sale/cook_county_with_geometries.geojson") %>%
st_transform(st_crs(hexagons)) %>%
select(Date.of.Purchase) %>%
mutate(year = format(as.Date(Date.of.Purchase, format = "%m/%d/%Y"), "%Y"))
class(land_sales$year[0])
land_sales = read_sf("land_sale/cook_county_with_geometries.geojson") %>%
st_transform(st_crs(hexagons)) %>%
select(Date.of.Purchase) %>%
mutate(year = as.integer(as.Date(Date.of.Purchase, format = "%m/%d/%Y")))
land_sales = read_sf("land_sale/cook_county_with_geometries.geojson") %>%
st_transform(st_crs(hexagons)) %>%
select(Date.of.Purchase) %>%
mutate(year = as.integer(format(as.Date(Date.of.Purchase, format = "%m/%d/%Y"), "%Y")))
class(land_sales$year[0])
tm_shape(land_sales) + tm_polygons(col = "year")
tm_shape(land_sales) + tm_polygons(col = "year", breaks = c(1800, 1820, 1840, 1860, 1880, Inf))
tm_shape(land_sales) + tm_polygons(col = "year", breaks = c(-Inf, 1830, 1840, 1850, 1860, 1870, 1880, Inf))
tm_shape(land_sales) + tm_polygons(col = "year", breaks = c(-Inf, 1830, 1840, 1850, 1860, 1870, 1880, Inf), border.alpha = 0)
hist(land_sales$year)
hist(land_sales$year, min = 1800)
hist(land_sales$year, xlim = c(1800,1900))
land_sales = read_sf("land_sale/cook_county_with_geometries.geojson") %>%
st_transform(st_crs(hexagons)) %>%
select(Date.of.Purchase) %>%
mutate(year = as.integer(format(as.Date(Date.of.Purchase, format = "%m/%d/%Y"), "%Y"))) %>%
filter(between(year, 1800, 1900))
hist(land_sales$year)
tm_shape(land_sales) + tm_polygons(col = "year", border.alpha = 0)
tm_shape(land_sales) + tm_polygons(col = "year", border.alpha = 0, breaks = c(-Inf, 1850, Inf))
tm_shape(land_sales) + tm_polygons(col = "year", border.alpha = 0, breaks = c(1800, 1840, 1900))
tm_shape(land_sales) + tm_polygons(col = "year", border.alpha = 0, breaks = c(1800, 1840, 1850, 1900))
tm_shape(land_sales) + tm_polygons(col = "year", border.alpha = 0, style = "continuous")
tm_shape(land_sales) + tm_polygons(col = "year", border.alpha = 0, style = "cont")
tmap_mode("plot")
tm_shape(land_sales) + tm_polygons(col = "year", border.alpha = 0, style = "cont")
View(pt4_data)
View(pt2_hexagons_hom_ct_yr_ALL)
View(pt4_data)
pt5_data = pt4_data %>%
mutate(had_max_0_hom = ifelse(hom_ct == 0, 1, 0)) %>%
mutate(had_max_3_hom = ifelse(hom_ct < 3, 1, 0))
View(pt5_data)
pt5_data = pt4_data %>%
arrange(by = year)
pt5_data = pt4_data %>%
arrange(by = year)
pt5_data$csum <- ave(pt5_data$hom_ct, pt5_data$GRID_ID, FUN=cumsum)
pt5_data = pt4_data %>%
arrange(by = year)
class(pt5_data$hom_ct[0])
3 %/% 3
2 %/% 3
pt5_data$csum_div3 <- ave((pt5_data$hom_ct %/% 3), pt5_data$GRID_ID, FUN=cumsum)
pt5_data = pt4_data %>%
arrange(by = year)
pt5_data = pt4_data %>%
arrange(by = year)
pt5_data$csum <- ave(pt5_data$hom_ct, pt5_data$GRID_ID, FUN=cumsum)
pt5_data$csum_div3 <- ave((pt5_data$hom_ct %/% 3), pt5_data$GRID_ID, FUN=cumsum)
pt5_data$no_hom_yet = ifelse(pt5_data$csum == 0, 1, 0)
pt5_data$no_3hom_yet = ifelse(pt5_data$csum_div3 == 0, 1, 0)
pt5_data_aggregated = pt5_data %>%
group_by(year) %>%
summarise(no_hom_yet = sum(no_hom_yet), no_3hom_yet = sum(no_3hom_yet))
View(pt5_data_aggregated)
plot(pt5_data_aggregated$geometry[0])
pt5_data = pt4_data %>%
arrange(by = year) %>%
st_drop_geometry()
# New columns show cumulative homicides (used for 0 survivorship curve) and
# cumulative homicides, after integer dividing homicides by 3 (used for 3 survivorship curve)
pt5_data$csum = ave(pt5_data$hom_ct, pt5_data$GRID_ID, FUN=cumsum)
pt5_data$csum_div3 = ave((pt5_data$hom_ct %/% 3), pt5_data$GRID_ID, FUN=cumsum)
pt5_data$no_hom_yet = ifelse(pt5_data$csum == 0, 1, 0)
pt5_data$no_3hom_yet = ifelse(pt5_data$csum_div3 == 0, 1, 0)
pt5_data_aggregated = pt5_data %>%
group_by(year) %>%
summarise(no_hom_yet = sum(no_hom_yet), no_3hom_yet = sum(no_3hom_yet))
head(melt(pt5_data_aggregated))
head(reshape(pt5_data_aggregated))
head(reshape(pt5_data_aggregated, direction = "long"))
head(reshape(pt5_data_aggregated, idvar = "year", direction = "long"))
head(reshape(pt5_data_aggregated, idvar = year, direction = "long"))
head(reshape(pt5_data_aggregated, idvar = pt5_data_aggregated$year, direction = "long"))
head(reshape(pt5_data_aggregated, varying = list(pt5_data_aggregated$no_hom_yet, pt5_data_aggregated$no_3hom_yet), direction = "long"))
library(tidyr)
pt5_data_aggregated = pt5_data %>%
group_by(year) %>%
summarise(no_hom_yet = sum(no_hom_yet), no_3hom_yet = sum(no_3hom_yet)) %>%
pivot_longer(cols = c(no_hom_yet, no_3hom_yet), names_to = "type", values_to = "survivorship")
# Line Graph
ggplot(data = pt5_data_aggregated, aes(x = year, y = survivorship, group = type)) +
geom_line(aes(color = type), size = 1) +
ylab("Number of Hexagons Remaining") +
xlab("Year")
